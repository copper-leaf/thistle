{
  "ownKey": "home",
  "ownPages": [
    {
      "reference": {
        "path": "",
        "baseUrl": "https://copper-leaf.github.io/thistle",
        "fileName": "",
        "extension": "html",
        "usePrettyUrl": true,
        "link": "https://copper-leaf.github.io/thistle"
      },
      "description": "",
      "title": "Home",
      "content": "<h1 id=\"thistle\"><a href=\"#thistle\" id=\"thistle\" class=\"anchor\"><\/a>Thistle<\/h1>\n<p>Kotlin multiplatform String markup library, inspired by <a href=\"https://github.com/jasonwyatt/SRML\">SRML<\/a>.<\/p>\n<p><img src=\"https://img.shields.io/github/v/release/copper-leaf/thistle\" alt=\"GitHub release (latest by date)\" />\n<img src=\"https://img.shields.io/maven-central/v/io.github.copper-leaf/thistle-core\" alt=\"Maven Central\" />\n<img src=\"https://img.shields.io/badge/Kotlin-1.6.10-orange\" alt=\"Kotlin Version\" /><\/p>\n<h2 id=\"overview\"><a href=\"#overview\" id=\"overview\" class=\"anchor\"><\/a>Overview<\/h2>\n<p>Thistle is a library for converting Strings with markup tags into text with inline styles. It\nsupports a variety of different targets, including Android, Compose UI, and Consoles, but with a\ncommon markup syntax shared by all targets.<\/p>\n<p><strong>Example Usage<\/strong><\/p>\n<pre><code class=\"language-kotlin\">// Android\nval thistle = ThistleParser(AndroidDefaults(context.applicationContext))\nbinding.textView.applyStyledText(\n    thistle,\n    &quot;Text with {{b}}bold{{/b}} or {{foreground color=#ff0000}}red{{/foreground}} styles&quot;\n)\n\n\n// Compose (both Android and Desktop)\nMaterialTheme {\n    ProvideThistle {\n        StyledText(&quot;Text with {{b}}bold{{/b}} or {{foreground color=#ff0000}}red{{/foreground}} styles&quot;)\n    }\n}\n\n\n// Console (ANSI codes)\nval thistle = ThistleParser(ConsoleDefaults())\nprintlnStyledText(\n    thistle,\n    &quot;Text with {{b}}bold{{/b}} or {{red}}red{{/red}} styles&quot;\n)\n\n<\/code><\/pre>\n<p><strong>Motivation<\/strong><\/p>\n<p>All UI platforms have some concept of inline text styling (using a single &quot;text view&quot; but having\nportions of the text with different colors, fonts, font weight, etc.). However, the API for actually\nusing these inline styles is usually very verbose and difficult to understand, and the actual\nimplementation of these styles varies greatly by platform. Some use a tree-like structure which is\nrelatively easy to work with (HTML <code>&lt;span&gt;<\/code>, or KTX extensions for Android <code>Spannable<\/code>), while\nothers have you manually computing text offsets and attaching markup tags manually (Compose, iOS).\nAnd don't even get me started on Console ANSI codes...<\/p>\n<p>Thistle aims to abstract all that complexity away, so that you don't need to know anything about the\nplatform's underlying text-styling mechanisms. You just provide your Strings and mark them up with\nthe intended styling, and Thistle will take care of the rest for you. The syntax is similar to many\nother markup languages, such as Twig or Handlebars, but can also be tweaked if needed.<\/p>\n<p>The initial idea came from an old Android library, <a href=\"https://github.com/jasonwyatt/SRML\">SRML<\/a>. It's\na small library that has been a lifesaver for my team for years, and Thistle began as a\nre-implementation of that library in Kotlin using a proper parser and AST instead of Regex. Having\nthis intermediate AST representation allows Thistle to easily adapt the same syntax to the different\nAPIs needed for each target.<\/p>\n<p><em>Important Note: Thistle is not designed to be a full template engine. The parser is not optimized\nfor handling large inputs, and the syntax is intentionally limited to only work with styling and\nsimple interpolation, but no logic. This is to keep the library focused and avoid bloat, while also\nmaximizing the ability for sharing input Strings and internal code across platforms without major\ncompatibility issues.<\/em><\/p>\n<h2 id=\"installation\"><a href=\"#installation\" id=\"installation\" class=\"anchor\"><\/a>Installation<\/h2>\n<pre><code class=\"language-kotlin\">repositories {\n    mavenCentral()\n}\n\n// for plain JVM or Android projects\ndependencies {\n    implementation(&quot;io.github.copper-leaf:thistle-core:4.0.1&quot;)\n    implementation(&quot;io.github.copper-leaf:thistle-android:4.0.1&quot;)\n    implementation(&quot;io.github.copper-leaf:thistle-compose-ui:4.0.1&quot;)\n    implementation(&quot;io.github.copper-leaf:thistle-console:4.0.1&quot;)\n}\n\n// for multiplatform projects\nkotlin {\n    sourceSets {\n        val commonMain by getting {\n            dependencies {\n                implementation(&quot;io.github.copper-leaf:thistle-core:4.0.1&quot;)\n                implementation(&quot;io.github.copper-leaf:thistle-android:4.0.1&quot;)\n                implementation(&quot;io.github.copper-leaf:thistle-compose-ui:4.0.1&quot;)\n                implementation(&quot;io.github.copper-leaf:thistle-console:4.0.1&quot;)\n            }\n        }\n    }\n}\n<\/code><\/pre>\n<h2 id=\"syntax\"><a href=\"#syntax\" id=\"syntax\" class=\"anchor\"><\/a>Syntax<\/h2>\n<p>The <a href=\"https://github.com/copper-leaf/thistle/tree/main/examples\">sample apps<\/a> demo a variety of\ndifferent tags, use-cases, and customizations, but here's a rundown of the basic syntax (which can\nbe <a href=\"#customization\">tweaked<\/a> to your needs).<\/p>\n<p>The following examples all demonstrate usage on Android.<\/p>\n<h3 id=\"tags\"><a href=\"#tags\" id=\"tags\" class=\"anchor\"><\/a>Tags<\/h3>\n<p>Tags work similar to inline HTML tags. They can be interspersed throughout the main text, and they can also be nested\nwithin each other arbitrarily deep.<\/p>\n<p>The following example shows usage of both the <code>foreground<\/code> and <code>background<\/code> tags placed inside normal text:<\/p>\n<pre><code>This text will be {{foreground color=#FF0000}}red{{/foreground}}, while this one has a {{background color=#0000FF}}blue{{/background}} background.\n<\/code><\/pre>\n<p><img src=\"https://copper-leaf.github.io/thistle/assets/media/syntax_tags.png\" alt=\"syntax_tags\" /><\/p>\n<h3 id=\"tag-parameters\"><a href=\"#tag-parameters\" id=\"tag-parameters\" class=\"anchor\"><\/a>Tag Parameters<\/h3>\n<p>Also like HTML tags, Thistle tags may be parameterized to tweak their rendering behavior. Parameters are assumed to be\nrequired (though this may be relaxed in the future), and they are strongly-typed. Values of a different type will not be\ncoerced, and will instead just throw an exception.<\/p>\n<p>Tag parameters are a list of <code>key=value<\/code> pairs separated by whitespace. Unlike HTML parameters, however, Thistle\nparameters should not be wrapped in quotes (<code>&quot;<\/code>) unless the value is actually intended to be a String.<\/p>\n<p>The <code>foreground<\/code> tag requires a <code>color<\/code> parameter to be set, which must be a hex color literal:<\/p>\n<pre><code>{{foreground color=#FF0000}}red{{/foreground}}\n<\/code><\/pre>\n<p><img src=\"https://copper-leaf.github.io/thistle/assets/media/syntax_parameters.png\" alt=\"syntax_parameters\" /><\/p>\n<p>Thistle recognizes the following formats for parameter values. You are also able to\n<a href=\"#custom-value-formats\">provide your own value formats<\/a> for aliasing or loading values from another source.<\/p>\n<table class=\"table\">\n<thead>\n<tr><th>Type<\/th><th>Example<\/th><th>Notes<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>Boolean<\/td><td><code>true<\/code>, <code>false<\/code><\/td><td> <\/td><\/tr>\n<tr><td>Double<\/td><td><code>1.1<\/code><\/td><td> <\/td><\/tr>\n<tr><td>Int<\/td><td><code>1<\/code><\/td><td> <\/td><\/tr>\n<tr><td>String<\/td><td><code>&quot;This is a string&quot;<\/code><\/td><td>String in quotes may contain spaces and escaped Unicode sequences<\/td><\/tr>\n<tr><td>Char<\/td><td><code>'c'<\/code><\/td><td> <\/td><\/tr>\n<tr><td>Hex Color<\/td><td><code>#FF0000<\/code><\/td><td>Parsed to an Int with <code>FF<\/code> alpha channel<\/td><\/tr>\n<tr><td>Context Value<\/td><td><code>context.username<\/code><\/td><td>See &quot;context data&quot; below<\/td><\/tr>\n<tr><td>Unquoted String<\/td><td><code>monospace<\/code><\/td><td>Unquoted string must be a single ASCII word with no spaces or Unicode sequences<\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"context-data\"><a href=\"#context-data\" id=\"context-data\" class=\"anchor\"><\/a>Context Data<\/h3>\n<p>Thistle renders each format string with an optional &quot;context data&quot; map. The values in this map can be accessed as tag\nparameters, and they can also be interpolated into the output as dynamic text.<\/p>\n<p>For example, given the following context data map:<\/p>\n<pre><code class=\"language-kotlin\">val contextData = mapOf(\n    &quot;themeRed&quot; to Color.RED\n)\n<\/code><\/pre>\n<p>You can reference <code>themeRed<\/code> from the foreground tag parameters:<\/p>\n<pre><code>{{foreground color=context.themeRed}}red{{/foreground}}\n<\/code><\/pre>\n<p><img src=\"https://copper-leaf.github.io/thistle/assets/media/syntax_context_data.png\" alt=\"syntax_context_data\" /><\/p>\n<h3 id=\"interpolation\"><a href=\"#interpolation\" id=\"interpolation\" class=\"anchor\"><\/a>Interpolation<\/h3>\n<p>Another useful feature of the context data is to render dynamic text into the output. This may be at the top-level, or\nwithin a tag's content. All objects in the context map are converted to text with <code>.toString()<\/code>, and Thistle does not\nsupport any further formatting or transformation on the interpolated values from the format string. Thus, if you need to\ncustomize the output of a variable, you will need to convert it manually to a string before adding it to the context data map.<\/p>\n<p>For example, given the following context data map:<\/p>\n<pre><code class=\"language-kotlin\">val contextData = mapOf(\n    &quot;username&quot; to &quot;AliceBob123&quot;,\n    &quot;userId&quot; to &quot;123456789&quot;,\n)\n<\/code><\/pre>\n<p><code>username<\/code> and <code>userId<\/code> can be rendered into the output dynamically:<\/p>\n<pre><code>Account: {{b}} {username} {{/b}} ({userId})\n<\/code><\/pre>\n<p><img src=\"https://copper-leaf.github.io/thistle/assets/media/syntax_interpolation.png\" alt=\"syntax_interpolation\" /><\/p>\n<h2 id=\"targets\"><a href=\"#targets\" id=\"targets\" class=\"anchor\"><\/a>Targets<\/h2>\n<p>Thistle uses a common parser, and a variety of renderers to format text at runtime. It supports both inline-styling, and\nbasic interpolation. Currently, only the Android renderer is built, but more targets are planned.<\/p>\n<p>Thistle also parses inputs to an Abstract Syntax Tree (AST) that can be cached and rendered multiple times for\nperformance. For small inputs or only rendering once, this may not be necessary, but parsing is significantly slower\nthan rendering (on the order of 10s of milliseconds for parsing, vs microseconds for rendering), so caching the AST\ncan be quite useful for text that gets re-rendered many times per second.<\/p>\n<p>Both the parser and the resulting AST are fully immutable and thus are completely thread-safe.<\/p>\n<p>Each target will naturally have different rendering capabilities, which are documented in the sections below.<\/p>\n<h3 id=\"android\"><a href=\"#android\" id=\"android\" class=\"anchor\"><\/a>Android<\/h3>\n<p>On Android, Thistle parses a String into a <code>Spanned<\/code> instance that can be set to a TextView. The Thistle format replaces\n&quot;tags&quot; with Android <code>Span<\/code>s, wrapping the appropriate text. The normal Span API can be a bit of a pain, and Thistle\nmakes this simpler, and also allows you to change the span formatting at runtime rather than compile time.<\/p>\n<pre><code class=\"language-kotlin\">// create the Thistle parser. It's best to create this once and inject it wherever needed\nval thistle = ThistleParser(AndroidDefaults(context.applicationContext)) // add the default tags for Android\n\n// parse a formatted string to a Spanned instance, and set that as the text of a TextView\nbinding.textView.applyStyledText(\n    thistle,\n    &quot;This is a {{b}}very important{{/b}}, {{foreground color=#ff0000}}urgent{{/foreground}} message!&quot;\n)\n\n<\/code><\/pre>\n<p>The Android target also adds an additional value format for accessing application resources, using the\nsame <code>@<\/code> syntax used in XML layouts.<\/p>\n<table class=\"table\">\n<thead>\n<tr><th>Type<\/th><th>Example<\/th><th>Notes<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>String resource<\/td><td><code>@string/app_name<\/code><\/td><td> <\/td><\/tr>\n<tr><td>Color resource<\/td><td><code>@color/colorPrimary<\/code><\/td><td> <\/td><\/tr>\n<tr><td>Drawable resource<\/td><td><code>@drawable/ic_launcher<\/code><\/td><td> <\/td><\/tr>\n<\/tbody>\n<\/table>\n<p><img src=\"https://copper-leaf.github.io/thistle/assets/media/sample_android.gif\" alt=\"sample_android_app\" /><\/p>\n<p><strong>Default Tags<\/strong><\/p>\n<table class=\"table\">\n<thead>\n<tr><th>Tag Name<\/th><th>Params<\/th><th>Description<\/th><th>Example<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>foreground<\/td><td><code>color=[hex color]<\/code><\/td><td>Change text color<\/td><td><code>{{foreground color=#FFFF00}}Text{{/foreground}}<\/code><\/td><\/tr>\n<tr><td>background<\/td><td><code>color=[hex color]<\/code><\/td><td>Change background color<\/td><td><code>{{background color=#FFFF00}}Text{{/background}}<\/code><\/td><\/tr>\n<tr><td>style<\/td><td><code>style=[bold,italic]<\/code><\/td><td>Set text to bold or italic by argument<\/td><td><code>{{style style=bold}}Text{{/style}}<\/code><\/td><\/tr>\n<tr><td>b<\/td><td>none<\/td><td>Set text style to bold<\/td><td><code>{{b}}Text{{/b}}<\/code><\/td><\/tr>\n<tr><td>i<\/td><td>none<\/td><td>Set text style to italic<\/td><td><code>{{i}}Text{{/i}}<\/code><\/td><\/tr>\n<tr><td>u<\/td><td>none<\/td><td>Add underline to text<\/td><td><code>{{u}}Text{{/u}}<\/code><\/td><\/tr>\n<tr><td>strikethrough<\/td><td>none<\/td><td>Add strikethrough to text<\/td><td><code>{{strikethrough}}Text{{/strikethrough}}<\/code><\/td><\/tr>\n<tr><td>typeface<\/td><td><code>typeface=[monospace,sans,serif]<\/code><\/td><td>Change the typeface to monospace, serif, or sans-serif by argument<\/td><td><code>{{typeface typeface=serif}}Text{{/typeface}}<\/code><\/td><\/tr>\n<tr><td>monospace<\/td><td>none<\/td><td>Change the typeface to monospace<\/td><td><code>{{monospace}}Text{{/monospace}}<\/code><\/td><\/tr>\n<tr><td>sans<\/td><td>none<\/td><td>Change the typeface to sans-serif<\/td><td><code>{{sans}}Text{{/sans}}<\/code><\/td><\/tr>\n<tr><td>serif<\/td><td>none<\/td><td>Change the typeface to serif<\/td><td><code>{{serif}}Text{{/serif}}<\/code><\/td><\/tr>\n<tr><td>subscript<\/td><td>none<\/td><td>Move text to a subscript<\/td><td><code>{{subscript}}Text{{/subscript}}<\/code><\/td><\/tr>\n<tr><td>superscript<\/td><td>none<\/td><td>Move text to a superscript<\/td><td><code>{{superscript}}Text{{/superscript}}<\/code><\/td><\/tr>\n<tr><td>icon<\/td><td><code>drawable=[@drawable/]<\/code><\/td><td>Replace text with an inline icon drawable<\/td><td><code>{{icon drawable=@drawable/icon}}Text{{/icon}}<\/code><\/td><\/tr>\n<tr><td>url<\/td><td><code>url=[String]<\/code><\/td><td>Make text a clickable link<\/td><td><code>{{url url=&quot;https://www.example.com/&quot;}}Text{{/url}}<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<ul>\n<li><a href=\"https://github.com/copper-leaf/thistle/tree/main/examples/android\">Android Example project<\/a><\/li>\n<\/ul>\n<h3 id=\"compose-ui\"><a href=\"#compose-ui\" id=\"compose-ui\" class=\"anchor\"><\/a>Compose UI<\/h3>\n<p>Thistle supporting rendering to Compose UI by building an <code>AnnotatedString<\/code>, which supports both\nAndroid and Desktop. The set of available tags for Compose are the same as Android (except it is\nmissing <code>icon<\/code> and <code>url<\/code>), allowing one to freely share Thistle strings between the standard and\nCompose Android renderers, if needed.<\/p>\n<pre><code class=\"language-kotlin\">// configure the Thistle parser at your UI root, right after the Theme. It can be updated or replaced further down the tree, if needed\nMaterialTheme {\n    ProvideThistle {\n\n        // Add additional tags to the root Thistle configuration for sub-trees of your UI. Especially useful for\n        // configuring Link tags that are only relevant for a small section of UI, without having to define\n        // those at the application root.\n        //\n        // This can be nested multiple times, but must be a child of `ProvideThistle`.\n        ProvideAdditionalThistleConfiguration({\n            tag(&quot;newTag&quot;) { TODO() }\n        }) {\n        }\n\n        // Add data to the Thistle Context variables for the UI sub-tree.\n        //\n        // This can be nested multiple times, but must be a child of `ProvideThistle`.\n        ProvideAdditionalThistleContext(\n            mapOf(&quot;a&quot; to &quot;b&quot;)\n        ) {\n        }\n\n        // Parse a formatted string to an AnnotatedString instance, and set that as the text of a BasicText\n        // composable. The resulting AnnotatedString is cached both from the input String and the Context: changed\n        // to the input String will be re-parsed and re-evaluated, while changes to the Context will only be\n        // re-evaluated with the new context values.\n        //\n        // This will typically be used as a child of `ProvideThistle`, but you can manually provide the Thistle\n        // instance and Context as function properties if needed, for more manual control.\n        StyledText(\n            &quot;This is a {{b}}very important{{/b}}, {{foreground color=#ff0000}}urgent{{/foreground}} message!&quot;\n        )\n    }\n}\n\n<\/code><\/pre>\n<p><img src=\"https://copper-leaf.github.io/thistle/assets/media/sample_compose.png\" alt=\"sample_android_app\" /><\/p>\n<p><strong>Default Tags<\/strong><\/p>\n<table class=\"table\">\n<thead>\n<tr><th>Tag Name<\/th><th>Params<\/th><th>Description<\/th><th>Example<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>foreground<\/td><td><code>color=[hex color]<\/code><\/td><td>Change text color<\/td><td><code>{{foreground color=#FFFF00}}Text{{/foreground}}<\/code><\/td><\/tr>\n<tr><td>background<\/td><td><code>color=[hex color]<\/code><\/td><td>Change background color<\/td><td><code>{{background color=#FFFF00}}Text{{/background}}<\/code><\/td><\/tr>\n<tr><td>style<\/td><td><code>style=[bold,italic]<\/code><\/td><td>Set text to bold or italic by argument<\/td><td><code>{{style style=bold}}Text{{/style}}<\/code><\/td><\/tr>\n<tr><td>b<\/td><td>none<\/td><td>Set text style to bold<\/td><td><code>{{b}}Text{{/b}}<\/code><\/td><\/tr>\n<tr><td>i<\/td><td>none<\/td><td>Set text style to italic<\/td><td><code>{{i}}Text{{/i}}<\/code><\/td><\/tr>\n<tr><td>u<\/td><td>none<\/td><td>Add underline to text<\/td><td><code>{{u}}Text{{/u}}<\/code><\/td><\/tr>\n<tr><td>strikethrough<\/td><td>none<\/td><td>Add strikethrough to text<\/td><td><code>{{strikethrough}}Text{{/strikethrough}}<\/code><\/td><\/tr>\n<tr><td>typeface<\/td><td><code>typeface=[monospace,sans,serif]<\/code><\/td><td>Change the typeface to monospace, serif, or sans-serif by argument<\/td><td><code>{{typeface typeface=serif}}Text{{/typeface}}<\/code><\/td><\/tr>\n<tr><td>monospace<\/td><td>none<\/td><td>Change the typeface to monospace<\/td><td><code>{{monospace}}Text{{/monospace}}<\/code><\/td><\/tr>\n<tr><td>sans<\/td><td>none<\/td><td>Change the typeface to sans-serif<\/td><td><code>{{sans}}Text{{/sans}}<\/code><\/td><\/tr>\n<tr><td>serif<\/td><td>none<\/td><td>Change the typeface to serif<\/td><td><code>{{serif}}Text{{/serif}}<\/code><\/td><\/tr>\n<tr><td>subscript<\/td><td>none<\/td><td>Move text to a subscript<\/td><td><code>{{subscript}}Text{{/subscript}}<\/code><\/td><\/tr>\n<tr><td>superscript<\/td><td>none<\/td><td>Move text to a superscript<\/td><td><code>{{superscript}}Text{{/superscript}}<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<ul>\n<li><a href=\"https://github.com/copper-leaf/thistle/tree/main/examples/compose-android\">Compose Android Example project<\/a><\/li>\n<li><a href=\"https://github.com/copper-leaf/thistle/tree/main/examples/compose-desktop\">Compose Desktop Example project<\/a><\/li>\n<\/ul>\n<h3 id=\"console\"><a href=\"#console\" id=\"console\" class=\"anchor\"><\/a>Console<\/h3>\n<p>For rendering to a console, Thistle converts the normal markup tags into\n<a href=\"https://en.wikipedia.org/wiki/ANSI_escape_code\">ANSI escape codes<\/a>. It currently supports 16-bit colors for both\nforeground and background, and some other basic styling options.<\/p>\n<pre><code class=\"language-kotlin\">// create the Thistle parser. It's best to create this once and inject it wherever needed\nval thistle = ThistleParser(ConsoleDefaults()) // add the default tags for rendering to the console\n\n// parse a formatted string to a ANSI escape codes, and render that to the console with `println()`\nprintlnStyledText(\n    thistle,\n    &quot;This is a {{b}}very important{{/b}}, {{red}}urgent{{/red}} message!&quot;\n)\n\n<\/code><\/pre>\n<p><img src=\"https://copper-leaf.github.io/thistle/assets/media/sample_console.png\" alt=\"sample_console\" /><\/p>\n<p><strong>Default Tags<\/strong><\/p>\n<p>Color tags support both normal and &quot;bright&quot; or &quot;bold&quot; colors. Typically, a tag name that\nis all uppercase letters will render the color in &quot;bold&quot;, while all lowercase letters will either render in normal style\nor offer a parameter for manually configuring it.<\/p>\n<p>Unless otherwise specified, in the table below <code>ansi color<\/code> will refer to one of the following color values: <code>black<\/code>,\n<code>red<\/code>, <code>green<\/code>, <code>yellow<\/code>, <code>blue<\/code>, <code>magenta<\/code>, <code>cyan<\/code>, <code>white<\/code>.<\/p>\n<p>By default, when an ANSI &quot;reset&quot; code is encountered, all styling is reset. Thistle automatically handles re-applying\nnested tags after a reset, so using nested tags works exactly as you would expect them to.<\/p>\n<table class=\"table\">\n<thead>\n<tr><th>Tag Name<\/th><th>Params<\/th><th>Description<\/th><th>Example<\/th><\/tr>\n<\/thead>\n<tbody>\n<tr><td>foreground/FOREGROUND<\/td><td><code>color=[ansi color]<\/code>, <code>bold=[true,false]<\/code><\/td><td>Change text color<\/td><td><code>{{foreground color=red bold=true}}Text{{/foreground}}<\/code><\/td><\/tr>\n<tr><td>background/FOREGROUND<\/td><td><code>color=[ansi color]<\/code>, <code>bold=[true,false]<\/code><\/td><td>Change background color<\/td><td><code>{{background color=red bold=true}}Text{{/background}}<\/code><\/td><\/tr>\n<tr><td>style<\/td><td><code>style=[bold,underline,strikethrough,reverse]<\/code><\/td><td>Set text to bold, underline, strikethrough, or reverse by argument<\/td><td><code>{{style style=bold}}Text{{/style}}<\/code><\/td><\/tr>\n<tr><td>black/BLACK<\/td><td>none<\/td><td>Set foreground color to black<\/td><td><code>{{black}}Text{{/black}}<\/code><\/td><\/tr>\n<tr><td>red/RED<\/td><td>none<\/td><td>Set foreground color to red<\/td><td><code>{{red}}Text{{/red}}<\/code><\/td><\/tr>\n<tr><td>green/GREEN<\/td><td>none<\/td><td>Set foreground color to green<\/td><td><code>{{green}}Text{{/green}}<\/code><\/td><\/tr>\n<tr><td>yellow/YELLOW<\/td><td>none<\/td><td>Set foreground color to yellow<\/td><td><code>{{yellow}}Text{{/yellow}}<\/code><\/td><\/tr>\n<tr><td>blue/BLUE<\/td><td>none<\/td><td>Set foreground color to blue<\/td><td><code>{{blue}}Text{{/blue}}<\/code><\/td><\/tr>\n<tr><td>magenta/MAGENTA<\/td><td>none<\/td><td>Set foreground color to magenta<\/td><td><code>{{magenta}}Text{{/magenta}}<\/code><\/td><\/tr>\n<tr><td>cyan/CYAN<\/td><td>none<\/td><td>Set foreground color to cyan<\/td><td><code>{{cyan}}Text{{/cyan}}<\/code><\/td><\/tr>\n<tr><td>white/WHITE<\/td><td>none<\/td><td>Set foreground color to white<\/td><td><code>{{white}}Text{{/white}}<\/code><\/td><\/tr>\n<tr><td>b<\/td><td>none<\/td><td>Set text style to bold<\/td><td><code>{{b}}Text{{/b}}<\/code><\/td><\/tr>\n<tr><td>u<\/td><td>none<\/td><td>Add underline to text<\/td><td><code>{{u}}Text{{/u}}<\/code><\/td><\/tr>\n<tr><td>reverse<\/td><td>none<\/td><td>Add underline to text<\/td><td><code>{{reverse}}Text{{/reverse}}<\/code><\/td><\/tr>\n<tr><td>strikethrough<\/td><td>none<\/td><td>Add strikethrough to text<\/td><td><code>{{strikethrough}}Text{{/strikethrough}}<\/code><\/td><\/tr>\n<\/tbody>\n<\/table>\n<h3 id=\"ios\"><a href=\"#ios\" id=\"ios\" class=\"anchor\"><\/a>iOS<\/h3>\n<p>TODO (follow issue <a href=\"https://github.com/copper-leaf/thistle/issues/2\">here<\/a>)<\/p>\n<h3 id=\"js-dom\"><a href=\"#js-dom\" id=\"js-dom\" class=\"anchor\"><\/a>JS DOM<\/h3>\n<p>TODO (follow issue <a href=\"https://github.com/copper-leaf/thistle/issues/3\">here<\/a>)<\/p>\n<h2 id=\"customization\"><a href=\"#customization\" id=\"customization\" class=\"anchor\"><\/a>Customization<\/h2>\n<p>All targets use the same Parser implementation, and only differ in the available tags and value formats. The following\ncustomizations are available for all platforms.<\/p>\n<h3 id=\"custom-tags\"><a href=\"#custom-tags\" id=\"custom-tags\" class=\"anchor\"><\/a>Custom Tags<\/h3>\n<p>Thistle ships with several useful tags out-of-the-box, but for highly stylized text, using all the tags in the format\nstring can get very tedious and muck up the original intent of the text: which is to do simple decoration of your text\nwithout much fuss.<\/p>\n<p>Do do this, you'll first need to provide Thistle with a custom <code>ThistleTag<\/code> implementation that parses the tag name and\ntag attributes from the format string. That Tag must then return the appropriate Android <code>Span<\/code> to apply the formatting\nyou need.<\/p>\n<p>Custom tag arguments are assumed to always be required. This may be relaxed in a future version, or you can ignore it by\nnot using <code>checkArgs<\/code> and pulling values from the <code>args<\/code> map manually.<\/p>\n<pre><code class=\"language-kotlin\">// create a custom implementation of ThistleTag\nclass CustomStyle : ThistleTagFactory&lt;AndroidThistleRenderContext, Any&gt; {\n    override fun invoke(renderContext: AndroidThistleRenderContext): Any {\n        // use checkArgs to safely pull properties from the input args and ensure incorrect args are not set\n        return checkArgs(renderContext) {\n            val color: Int by int()\n\n            // return anything that can be set to a `SpannableStringBuilder`\n            BackgroundColorSpan(color)\n        }\n    }\n}\n\nval thistle = ThistleParser(AndroidDefaults(context.applicationContext)) {\n    // register your custom tab with the Thistle parser\n    tag(&quot;customStyle&quot;) { CustomStyle() }\n\n    // the Link ThistleTag is useful for making portions of text clickable\n    tag(&quot;inc&quot;) { AndroidLink { widget: View -&gt; /* do something on link-click */ } }\n    tag(&quot;dec&quot;) { AndroidLink { widget: View -&gt; /* do something on link-click */ } }\n}\n\nbinding.textView.applyStyledText(\n    thistle,\n    &quot;{{inc}}+{{/inc}} {{customStyle}}count:{{/customStyle}} {{dec}}-{{/dec}}&quot;\n)\n\n<\/code><\/pre>\n<h3 id=\"custom-value-formats\"><a href=\"#custom-value-formats\" id=\"custom-value-formats\" class=\"anchor\"><\/a>Custom Value Formats<\/h3>\n<p>Want to create new formats for literals not handled out-of-the-box, or create custom aliases? No problem! You can\nprovide custom Kudzu parsers for that too. You'll need to use a <code>MappedParser<\/code> to wrap your syntax and format the text\nvalue to the intended literal value.<\/p>\n<pre><code class=\"language-kotlin\">val thistle = ThistleParser(AndroidDefaults(context.applicationContext)) {\n    valueFormat {\n        MappedParser(\n            LiteralTokenParser(&quot;@color/red&quot;)\n        ) { Color.RED }.asThistleValueParser()\n    }\n}\n\nbinding.textView.applyStyledText(\n    thistle,\n    &quot;{{foreground color=@color/red}}|{{/foreground}}&quot;\n)\n\n<\/code><\/pre>\n<h3 id=\"custom-startend-tokens\"><a href=\"#custom-startend-tokens\" id=\"custom-startend-tokens\" class=\"anchor\"><\/a>Custom Start/End Tokens<\/h3>\n<p>Thistle allows you full control over the syntax for each tag, also you're also free to create new tags for your needs.\nBy providing custom Kudzu token parsers for the open or close tags, you can tweak the look to match your preferences.<\/p>\n<pre><code class=\"language-kotlin\">val thistle = ThistleParser(AndroidDefaults(context.applicationContext)) {\n    // customize syntax to use Django/Twig/Pebble-style tags\n    customSyntax(\n        openTagStartToken = LiteralTokenParser(&quot;{%&quot;),\n        openTagEndToken = LiteralTokenParser(&quot;%}&quot;),\n        closeTagStartToken = LiteralTokenParser(&quot;{%&quot;),\n        closeTagEndToken = LiteralTokenParser(&quot;%}&quot;),\n        interpolateStartToken = LiteralTokenParser(&quot;{{&quot;),\n        interpolateEndToken = LiteralTokenParser(&quot;}}&quot;),\n    )\n}\n\nbinding.textView.applyStyledText(\n    thistle,\n    &quot;{% inc %}Click Me!{% inc %}    {% foreground color=#ff0000%}|{% foreground %}    {% dec %}Don't Click Me!{% dec %}&quot;\n)\n\n<\/code><\/pre>\n"
    },
    {
      "reference": {
        "path": "",
        "baseUrl": "https://copper-leaf.github.io/thistle",
        "fileName": "404",
        "extension": "html",
        "usePrettyUrl": false,
        "link": "https://copper-leaf.github.io/thistle/404.html"
      },
      "description": "",
      "title": "Not Found",
      "content": ""
    }
  ]
}